# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import airflow_pb2 as airflow__pb2


class PingStub(object):
  """service
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Ping = channel.unary_unary(
        '/service.Ping/Ping',
        request_serializer=airflow__pb2.ReqPingData.SerializeToString,
        response_deserializer=airflow__pb2.RespPingData.FromString,
        )


class PingServicer(object):
  """service
  """

  def Ping(self, request, context):
    """check agent status
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PingServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Ping': grpc.unary_unary_rpc_method_handler(
          servicer.Ping,
          request_deserializer=airflow__pb2.ReqPingData.FromString,
          response_serializer=airflow__pb2.RespPingData.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'service.Ping', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class DeployStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Deploy = channel.unary_unary(
        '/service.Deploy/Deploy',
        request_serializer=airflow__pb2.ReqPingData.SerializeToString,
        response_deserializer=airflow__pb2.RespPingData.FromString,
        )


class DeployServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Deploy(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DeployServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Deploy': grpc.unary_unary_rpc_method_handler(
          servicer.Deploy,
          request_deserializer=airflow__pb2.ReqPingData.FromString,
          response_serializer=airflow__pb2.RespPingData.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'service.Deploy', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class ServiceCheckStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ServiceCheck = channel.unary_unary(
        '/service.ServiceCheck/ServiceCheck',
        request_serializer=airflow__pb2.ReqCheckSvcData.SerializeToString,
        response_deserializer=airflow__pb2.RespCheckSvcData.FromString,
        )


class ServiceCheckServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def ServiceCheck(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ServiceCheckServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ServiceCheck': grpc.unary_unary_rpc_method_handler(
          servicer.ServiceCheck,
          request_deserializer=airflow__pb2.ReqCheckSvcData.FromString,
          response_serializer=airflow__pb2.RespCheckSvcData.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'service.ServiceCheck', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
